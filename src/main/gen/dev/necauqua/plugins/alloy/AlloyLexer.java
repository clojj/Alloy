/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package dev.necauqua.plugins.alloy;

import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.intellij.lexer.FlexLexer;
import dev.necauqua.plugins.alloy.psi.Types;
import java.io.Reader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>lexer.flex</tt>
 */
public class AlloyLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WHITESPACE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\1\1\0\1\3\1\2\22\0\1\3\2\7\1\0\2\7\1\0\1\7\2\0\1\5\1\0\1\43\1"+
    "\6\1\0\1\4\1\11\11\10\4\0\1\50\1\7\1\0\32\7\1\46\1\0\1\47\1\0\1\40\1\0\1\12"+
    "\1\13\1\17\1\22\1\23\1\37\1\42\1\25\1\27\1\30\1\26\1\20\1\32\1\21\1\31\1\36"+
    "\1\41\1\16\1\14\1\15\1\24\1\35\1\7\1\33\1\34\1\7\1\44\1\0\1\45\202\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\1\1\3\2\4\20\3\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\0\1\13\1\0"+
    "\1\3\1\14\15\3\1\15\5\3\1\16\3\3\1\17"+
    "\10\3\2\12\1\0\2\3\1\20\1\21\1\22\1\3"+
    "\1\23\1\24\1\25\1\26\2\3\1\27\1\3\1\30"+
    "\1\3\1\31\6\3\1\32\2\3\1\33\2\3\1\34"+
    "\1\35\6\3\1\36\1\37\3\3\1\40\1\41\1\3"+
    "\1\42\1\43\1\44\1\45\1\46\4\3\1\47\1\3"+
    "\1\50\1\3\1\51\1\3\1\52\1\53\1\3\1\54"+
    "\3\3\1\55\5\3\1\56\5\3\1\57\1\60\4\3"+
    "\1\61\1\3\1\62\4\3\1\63\1\64\1\3\1\65"+
    "\1\3\1\66\1\67\1\70\3\3\1\71\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\122\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e"+
    "\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d\0\u0386"+
    "\0\u03af\0\122\0\122\0\122\0\122\0\122\0\u03d8\0\u0401"+
    "\0\122\0\u042a\0\u0453\0\u047c\0\u04a5\0\u04ce\0\u04f7\0\u0520"+
    "\0\u0549\0\u0572\0\u059b\0\u05c4\0\u05ed\0\u0616\0\u063f\0\u0668"+
    "\0\u0691\0\u06ba\0\u06e3\0\u070c\0\u0735\0\u075e\0\u0787\0\u07b0"+
    "\0\u07d9\0\u0802\0\u082b\0\366\0\u0854\0\u087d\0\u08a6\0\u08cf"+
    "\0\u08f8\0\u0921\0\u094a\0\u0973\0\122\0\u099c\0\u09c5\0\u09ee"+
    "\0\u0a17\0\366\0\366\0\366\0\u0a40\0\366\0\366\0\366"+
    "\0\366\0\u0a69\0\u0a92\0\366\0\u0abb\0\366\0\u0ae4\0\366"+
    "\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1\0\u0bda\0\u0c03\0\u0c2c"+
    "\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0\0\366\0\366\0\u0cf9\0\u0d22"+
    "\0\u0d4b\0\u0d74\0\u0d9d\0\u0dc6\0\366\0\366\0\u0def\0\u0e18"+
    "\0\u0e41\0\366\0\366\0\u0e6a\0\366\0\366\0\u0e93\0\366"+
    "\0\366\0\u0ebc\0\u0ee5\0\u0f0e\0\u0f37\0\366\0\u0f60\0\366"+
    "\0\u0f89\0\366\0\u0fb2\0\u0fdb\0\366\0\u1004\0\366\0\u102d"+
    "\0\u1056\0\u107f\0\366\0\u10a8\0\u10d1\0\u10fa\0\u1123\0\u114c"+
    "\0\366\0\u1175\0\u119e\0\u11c7\0\u11f0\0\u1219\0\366\0\366"+
    "\0\u1242\0\u126b\0\u1294\0\u12bd\0\366\0\u12e6\0\366\0\u130f"+
    "\0\u1338\0\u1361\0\u138a\0\366\0\366\0\u13b3\0\366\0\u13dc"+
    "\0\366\0\366\0\366\0\u1405\0\u142e\0\u1457\0\366\0\366";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\4\1\5\1\3\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\2\7\1\25\1\7\1\26\1\27"+
    "\3\7\1\30\1\31\3\7\1\32\1\33\1\34\1\35"+
    "\1\36\52\3\52\0\3\4\51\0\1\37\1\40\51\0"+
    "\1\37\1\0\1\10\1\11\36\0\1\41\4\0\1\42"+
    "\2\0\34\7\16\0\2\10\43\0\1\42\2\0\4\7"+
    "\1\43\1\44\3\7\1\45\1\46\21\7\12\0\1\42"+
    "\2\0\15\7\1\47\16\7\12\0\1\42\2\0\6\7"+
    "\1\50\5\7\1\51\1\52\2\7\1\53\1\7\1\54"+
    "\11\7\12\0\1\42\2\0\16\7\1\55\15\7\12\0"+
    "\1\42\2\0\15\7\1\56\16\7\12\0\1\42\2\0"+
    "\16\7\1\57\15\7\12\0\1\42\2\0\14\7\1\60"+
    "\5\7\1\61\11\7\12\0\1\42\2\0\22\7\1\62"+
    "\11\7\12\0\1\42\2\0\20\7\1\63\13\7\12\0"+
    "\1\42\2\0\11\7\1\64\1\65\11\7\1\66\7\7"+
    "\12\0\1\42\2\0\12\7\1\67\21\7\12\0\1\42"+
    "\2\0\12\7\1\70\1\71\7\7\1\72\4\7\1\73"+
    "\3\7\12\0\1\42\2\0\7\7\1\74\2\7\1\75"+
    "\14\7\1\76\4\7\12\0\1\42\2\0\22\7\1\77"+
    "\11\7\12\0\1\42\2\0\3\7\1\100\3\7\1\101"+
    "\24\7\12\0\1\42\2\0\3\7\1\102\11\7\1\103"+
    "\4\7\1\104\11\7\6\0\1\37\1\105\1\106\46\37"+
    "\5\40\1\107\43\40\7\0\1\7\2\0\31\7\12\0"+
    "\1\42\2\0\5\7\1\110\26\7\12\0\1\42\2\0"+
    "\5\7\1\111\26\7\12\0\1\42\2\0\11\7\1\112"+
    "\22\7\12\0\1\42\2\0\13\7\1\113\20\7\12\0"+
    "\1\42\2\0\6\7\1\114\25\7\12\0\1\42\2\0"+
    "\7\7\1\115\24\7\12\0\1\42\2\0\6\7\1\116"+
    "\23\7\1\117\1\7\12\0\1\42\2\0\23\7\1\120"+
    "\10\7\12\0\1\42\2\0\33\7\1\121\12\0\1\42"+
    "\2\0\23\7\1\122\10\7\12\0\1\42\2\0\20\7"+
    "\1\123\13\7\12\0\1\42\2\0\12\7\1\124\21\7"+
    "\12\0\1\42\2\0\14\7\1\125\17\7\12\0\1\42"+
    "\2\0\6\7\1\126\25\7\12\0\1\42\2\0\12\7"+
    "\1\127\21\7\12\0\1\42\2\0\6\7\1\130\3\7"+
    "\1\131\21\7\12\0\1\42\2\0\5\7\1\132\26\7"+
    "\12\0\1\42\2\0\5\7\1\133\26\7\12\0\1\42"+
    "\2\0\15\7\1\134\16\7\12\0\1\42\2\0\3\7"+
    "\1\135\2\7\1\136\7\7\1\137\10\7\1\140\4\7"+
    "\12\0\1\42\2\0\20\7\1\141\13\7\12\0\1\42"+
    "\2\0\6\7\1\142\25\7\12\0\1\42\2\0\14\7"+
    "\1\143\17\7\12\0\1\42\2\0\27\7\1\144\4\7"+
    "\12\0\1\42\2\0\30\7\1\145\3\7\12\0\1\42"+
    "\2\0\14\7\1\146\17\7\12\0\1\42\2\0\14\7"+
    "\1\147\17\7\12\0\1\42\2\0\13\7\1\150\20\7"+
    "\12\0\1\42\2\0\7\7\1\151\24\7\12\0\1\42"+
    "\2\0\14\7\1\152\3\7\1\153\13\7\12\0\1\42"+
    "\2\0\10\7\1\154\23\7\12\0\1\42\2\0\12\7"+
    "\1\155\21\7\12\0\1\42\2\0\7\7\1\156\24\7"+
    "\7\0\1\105\47\0\4\40\1\105\1\107\43\40\4\0"+
    "\1\42\2\0\6\7\1\157\25\7\12\0\1\42\2\0"+
    "\14\7\1\160\17\7\12\0\1\42\2\0\20\7\1\161"+
    "\13\7\12\0\1\42\2\0\14\7\1\162\17\7\12\0"+
    "\1\42\2\0\5\7\1\163\26\7\12\0\1\42\2\0"+
    "\10\7\1\164\23\7\12\0\1\42\2\0\14\7\1\165"+
    "\17\7\12\0\1\42\2\0\14\7\1\166\17\7\12\0"+
    "\1\42\2\0\21\7\1\167\12\7\12\0\1\42\2\0"+
    "\14\7\1\170\17\7\12\0\1\42\2\0\23\7\1\171"+
    "\10\7\12\0\1\42\2\0\10\7\1\172\23\7\12\0"+
    "\1\42\2\0\14\7\1\173\17\7\12\0\1\42\2\0"+
    "\3\7\1\174\30\7\12\0\1\42\2\0\14\7\1\175"+
    "\17\7\12\0\1\42\2\0\26\7\1\176\5\7\12\0"+
    "\1\42\2\0\31\7\1\177\2\7\12\0\1\42\2\0"+
    "\12\7\1\200\21\7\12\0\1\42\2\0\11\7\1\201"+
    "\22\7\12\0\1\42\2\0\12\7\1\202\21\7\12\0"+
    "\1\42\2\0\15\7\1\203\16\7\12\0\1\42\2\0"+
    "\6\7\1\204\25\7\12\0\1\42\2\0\13\7\1\205"+
    "\20\7\12\0\1\42\2\0\26\7\1\206\5\7\12\0"+
    "\1\42\2\0\6\7\1\207\25\7\12\0\1\42\2\0"+
    "\7\7\1\210\24\7\12\0\1\42\2\0\7\7\1\211"+
    "\24\7\12\0\1\42\2\0\12\7\1\212\21\7\12\0"+
    "\1\42\2\0\17\7\1\213\14\7\12\0\1\42\2\0"+
    "\22\7\1\214\11\7\12\0\1\42\2\0\6\7\1\215"+
    "\25\7\12\0\1\42\2\0\12\7\1\216\21\7\12\0"+
    "\1\42\2\0\15\7\1\217\16\7\12\0\1\42\2\0"+
    "\10\7\1\220\23\7\12\0\1\42\2\0\10\7\1\221"+
    "\23\7\12\0\1\42\2\0\20\7\1\222\13\7\12\0"+
    "\1\42\2\0\11\7\1\223\22\7\12\0\1\42\2\0"+
    "\20\7\1\224\13\7\12\0\1\42\2\0\3\7\1\225"+
    "\30\7\12\0\1\42\2\0\3\7\1\226\30\7\12\0"+
    "\1\42\2\0\6\7\1\227\25\7\12\0\1\42\2\0"+
    "\33\7\1\230\12\0\1\42\2\0\20\7\1\231\13\7"+
    "\12\0\1\42\2\0\11\7\1\232\22\7\12\0\1\42"+
    "\2\0\13\7\1\233\20\7\12\0\1\42\2\0\5\7"+
    "\1\234\26\7\12\0\1\42\2\0\6\7\1\235\25\7"+
    "\12\0\1\42\2\0\14\7\1\236\17\7\12\0\1\42"+
    "\2\0\14\7\1\237\17\7\12\0\1\42\2\0\6\7"+
    "\1\240\25\7\12\0\1\42\2\0\6\7\1\241\25\7"+
    "\12\0\1\42\2\0\10\7\1\242\23\7\12\0\1\42"+
    "\2\0\12\7\1\243\21\7\12\0\1\42\2\0\25\7"+
    "\1\244\6\7\12\0\1\42\2\0\5\7\1\245\26\7"+
    "\12\0\1\42\2\0\6\7\1\246\25\7\12\0\1\42"+
    "\2\0\5\7\1\247\26\7\12\0\1\42\2\0\20\7"+
    "\1\250\13\7\12\0\1\42\2\0\14\7\1\251\17\7"+
    "\12\0\1\42\2\0\6\7\1\252\25\7\12\0\1\42"+
    "\2\0\6\7\1\253\25\7\12\0\1\42\2\0\20\7"+
    "\1\254\13\7\12\0\1\42\2\0\22\7\1\255\11\7"+
    "\12\0\1\42\2\0\26\7\1\256\5\7\12\0\1\42"+
    "\2\0\12\7\1\257\21\7\12\0\1\42\2\0\14\7"+
    "\1\260\17\7\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5248];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\5\1\1\11\20\1\5\11\1\1\1\0"+
    "\1\11\1\0\42\1\1\11\1\1\1\0\151\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public AlloyLexer() {
    this(null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AlloyLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 59: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 60: break;
          case 3: 
            { return Types.QUAL_NAME;
            } 
            // fall through
          case 61: break;
          case 4: 
            { return Types.INTEGER;
            } 
            // fall through
          case 62: break;
          case 5: 
            { return Types.COMMA;
            } 
            // fall through
          case 63: break;
          case 6: 
            { return Types.LBRACE;
            } 
            // fall through
          case 64: break;
          case 7: 
            { return Types.RBRACE;
            } 
            // fall through
          case 65: break;
          case 8: 
            { return Types.LBRACKET;
            } 
            // fall through
          case 66: break;
          case 9: 
            { return Types.RBRACKET;
            } 
            // fall through
          case 67: break;
          case 10: 
            { return Types.COMMENT;
            } 
            // fall through
          case 68: break;
          case 11: 
            { return Types.ARROW;
            } 
            // fall through
          case 69: break;
          case 12: 
            { return Types.K_AS;
            } 
            // fall through
          case 70: break;
          case 13: 
            { return Types.K_NO;
            } 
            // fall through
          case 71: break;
          case 14: 
            { return Types.K_IN;
            } 
            // fall through
          case 72: break;
          case 15: 
            { return Types.K_OR;
            } 
            // fall through
          case 73: break;
          case 16: 
            { return Types.K_ALL;
            } 
            // fall through
          case 74: break;
          case 17: 
            { return Types.K_AND;
            } 
            // fall through
          case 75: break;
          case 18: 
            { return Types.K_BUT;
            } 
            // fall through
          case 76: break;
          case 19: 
            { return Types.K_SET;
            } 
            // fall through
          case 77: break;
          case 20: 
            { return Types.K_SEQ;
            } 
            // fall through
          case 78: break;
          case 21: 
            { return Types.K_SUM;
            } 
            // fall through
          case 79: break;
          case 22: 
            { return Types.K_SIG;
            } 
            // fall through
          case 80: break;
          case 23: 
            { return Types.K_RUN;
            } 
            // fall through
          case 81: break;
          case 24: 
            { return Types.K_LET;
            } 
            // fall through
          case 82: break;
          case 25: 
            { return Types.K_NOT;
            } 
            // fall through
          case 83: break;
          case 26: 
            { return Types.K_EXH;
            } 
            // fall through
          case 84: break;
          case 27: 
            { return Types.K_INT;
            } 
            // fall through
          case 85: break;
          case 28: 
            { return Types.K_IFF;
            } 
            // fall through
          case 86: break;
          case 29: 
            { return Types.K_ONE;
            } 
            // fall through
          case 87: break;
          case 30: 
            { return Types.K_FUN;
            } 
            // fall through
          case 88: break;
          case 31: 
            { return Types.K_FOR;
            } 
            // fall through
          case 89: break;
          case 32: 
            { return Types.K_SOME;
            } 
            // fall through
          case 90: break;
          case 33: 
            { return Types.K_THIS;
            } 
            // fall through
          case 91: break;
          case 34: 
            { return Types.K_LONE;
            } 
            // fall through
          case 92: break;
          case 35: 
            { return Types.K_NONE;
            } 
            // fall through
          case 93: break;
          case 36: 
            { return Types.K_DISJ;
            } 
            // fall through
          case 94: break;
          case 37: 
            { return Types.K_ELSE;
            } 
            // fall through
          case 95: break;
          case 38: 
            { return Types.K_ENUM;
            } 
            // fall through
          case 96: break;
          case 39: 
            { return Types.K_UNIV;
            } 
            // fall through
          case 97: break;
          case 40: 
            { return Types.K_IDEN;
            } 
            // fall through
          case 98: break;
          case 41: 
            { return Types.K_OPEN;
            } 
            // fall through
          case 99: break;
          case 42: 
            { return Types.K_PART;
            } 
            // fall through
          case 100: break;
          case 43: 
            { return Types.K_PRED;
            } 
            // fall through
          case 101: break;
          case 44: 
            { return Types.K_FACT;
            } 
            // fall through
          case 102: break;
          case 45: 
            { return Types.K_CHECK;
            } 
            // fall through
          case 103: break;
          case 46: 
            { return Types.K_INT_C;
            } 
            // fall through
          case 104: break;
          case 47: 
            { return Types.K_ASSERT;
            } 
            // fall through
          case 105: break;
          case 48: 
            { return Types.K_STRING;
            } 
            // fall through
          case 106: break;
          case 49: 
            { return Types.K_EXPECT;
            } 
            // fall through
          case 107: break;
          case 50: 
            { return Types.K_MODULE;
            } 
            // fall through
          case 108: break;
          case 51: 
            { return Types.K_EXACTLY;
            } 
            // fall through
          case 109: break;
          case 52: 
            { return Types.K_EXTENDS;
            } 
            // fall through
          case 110: break;
          case 53: 
            { return Types.K_IMPLIES;
            } 
            // fall through
          case 111: break;
          case 54: 
            { return Types.K_PRIVATE;
            } 
            // fall through
          case 112: break;
          case 55: 
            { return Types.K_ABSTRACT;
            } 
            // fall through
          case 113: break;
          case 56: 
            { return Types.K_DISJOINT;
            } 
            // fall through
          case 114: break;
          case 57: 
            { return Types.K_PARTITION;
            } 
            // fall through
          case 115: break;
          case 58: 
            { return Types.K_EXHAUSTIVE;
            } 
            // fall through
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
